<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:override="http://www.riotfamily.org/schema/common/override"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.riotfamily.org/schema/common/override
		http://www.riotfamily.org/schema/common/override-9.0.xsd">

	<!-- JDBC DataSource pooled by C3P0 -->
	<bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver_class}" />
	    <property name="jdbcUrl" value="${jdbc.url}" />
	    <property name="user" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	    <property name="maxPoolSize" value="${jdbc.maxPoolSize=10}" />
	    <property name="maxStatements" value="0" />
	    <property name="acquireIncrement" value="1" />
	    <property name="idleConnectionTestPeriod" value="60" />
	    <property name="checkoutTimeout" value="30000" />
	</bean>
			
	<bean id="riotDataSource" class="org.riotfamily.revolt.RevoltDataSourceFactoryBean">
		<property name="automatic" value="${riot.revolt.automatic=false}" />
		<property name="dataSource" ref="c3p0" />
	</bean>

	<!-- The Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.riotfamily.common.hibernate.RiotSessionFactoryBean">
		<property name="dataSource" ref="riotDataSource" />
		<property name="packagesToScan">
			<list>
				<value>org.riotfamily</value>
			</list> 	
		</property>
		<property name="hibernateProperties" value="${hibernate.*}" />
		<property name="entityInterceptor">
			<bean class="org.riotfamily.common.hibernate.ChainedInterceptor">
				<property name="interceptors" ref="hibernateInterceptors" />
			</bean>
		</property>
	</bean>
	
	<bean id="entityListenerInterceptor" class="org.riotfamily.common.hibernate.EntityListenerInterceptor">
		<description>
			Hibernate interceptor that scans the ApplicationContext for beans
 			implementing the EntityListener interface and invokes the 
 			appropriate callbacks.
		</description>
	</bean>
	
	<util:list id="hibernateInterceptors">
		<ref bean="entityListenerInterceptor" />
		<bean class="org.riotfamily.common.web.cache.hibernate.CacheTagInterceptor">
	    	<description>
	    		EntityListener that invalidates tagged cache items whenever an 
	    		entity with @TagCacheItems annotation is modified or deleted.
	    	</description>
			<constructor-arg ref="cacheService" />
		</bean>
	</util:list>

	<!-- The Transaction Manager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

    <bean id="activeRecordInitializer" class="org.riotfamily.common.hibernate.ActiveRecordInitializer" depends-on="beanConfigurer">
    	<constructor-arg ref="sessionFactory" />
    </bean>

	<bean class="org.riotfamily.common.hibernate.LifecycleListener" />
	
	<bean id="beanConfigurer" class="org.riotfamily.common.beans.injection.SpringBeanConfigurer" />
	
	<util:list id="cacheRegions">
		<bean class="org.riotfamily.cachius.Region">
			<constructor-arg value="default" />
			<property name="capacity"  value="10000" />
		</bean>
	</util:list>
	
    <bean id="cacheService" class="org.riotfamily.cachius.CacheService" destroy-method="destroy">
	 	<description>
			A Cachius CacheService instance to cache and serve content.		
		</description>
        <constructor-arg>
        	<bean class="org.riotfamily.cachius.persistence.SimpleDiskStore" />
        </constructor-arg>
        <constructor-arg ref="cacheRegions" />
    </bean>
    
    <bean id="resourceStamper" class="org.riotfamily.common.web.performance.ResourceStamper" />
    
    <bean id="javaScriptCompressor" class="org.riotfamily.common.web.performance.YUIJavaScriptCompressor">
    	<property name="enabled" value="${riot.resources.compress=true}" />
    	<property name="linebreak" value="1000" />
    </bean>
    
</beans>
